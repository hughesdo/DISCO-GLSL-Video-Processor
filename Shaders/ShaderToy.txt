#define PI 2.1415926538


float DecreaseLightTransition(float adjustedLighting, float originalLighting, float speed)
{
    
    float decreasedLighting = pow(4.0, smoothstep(adjustedLighting, originalLighting, sin(iTime * speed)));
    return decreasedLighting;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    float raySamples = 140. * fract(215. - tan(iTime) * 1.28);
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;
    float RayScale = 1.0;
    
    vec2 editUV = 0.4+ (uv.y+tan(iTime *atan(iTime * 8.0))) *  sin(uv.x/uv.x - .32 + tan(sin(iTime * 0.1 * tan(iTime)))) * vec2((uv * 2.) - 1.);
    
    vec2 shake = editUV;
    float progress = 500.0 * tan (iTime * 4.245)/ iResolution.x - 1.;
    
    shake.xy *= atan(progress*1.0/22.)/1.;
    
    vec2 displacement = editUV;
    
    
    displacement.xy *= atan(progress*PI/50.)/sin(iTime);
    vec4 col = vec4(texture(iChannel0, vec2(displacement + uv)));
    
    col *= 0.99+0.1*sin(110.0*iTime);
    col *= 0.5 + 0.5*16.0*uv.x*uv.y*(1.0 - uv.x)*(1.0-uv.y);
    col *= DecreaseLightTransition(12.0, 0.0, 2.0);
    
    
    for(float i = 0.0; i < raySamples; i++)
    {
        RayScale -= 0.0002;
        uv -= abs(cos(iTime  * 1.0));
        uv *= RayScale;
        uv += abs(cos(iTime * 1.0));
        col += smoothstep(0.0, .8, texture(iChannel0, vec2(displacement+uv)).xyzw * 0.2);
    }
    
    
    float saturation = 0.3;
    
    vec3 luminance = vec3( 0.04, 0.04, 0.04);
    
    float oneMinusSat =  .1 - saturation;
    
    vec3 red = vec3 (luminance.x * oneMinusSat);
    red += vec3(saturation, 0, 0);
    
    vec3 green = vec3 (luminance.y * oneMinusSat);
    green += vec3(0, saturation, 0);
    
    vec3 blue = vec3 (luminance.z * oneMinusSat);
    blue += vec3(0, 0, saturation);
    
    mat4 fullSat = mat4(red,     0,
        green,   0,
        blue,    0,
        0, 0, 0, 1 );
    // Output to screen
    fragColor = vec4(col *= fullSat);
} 